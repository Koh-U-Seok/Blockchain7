Node.js

    1. Node.js 설치
    - Node.js 검색 후 설치한다.

    2. Node.js 서버를 설치할 폴더를 만든 뒤 cd로 해당 폴더에 접근한다.

    3. 터미널 입력
    - npm init
    - npm i express express-session morgan dotenv path cookie-parser
    - npm i -D nodemon

    4. route해줄 폴더 만들어주기. >> routes로 지정하였음.
    - route해주지 않고 서버에서 다 처리할 수도 있다.

    5. index.js 만들기
    {
        const express = require("express");
        const session = require("express-session");
        const dotenv = require("dotenv");
        const cookieParser = require("cookie-parser");
        const morgan = require("morgan");
        const path = require("path");

        const routes = require("./routes/index.js");

        const app = express();
        
        dotenv.config();

        app.use((req, res, next) => {
        if (process.env.NODE_ENV === "production") morgan("combined")(req, res, next);
        else morgan("dev")(req, res, next);
        });
        app.use("/", express.static(path.join(__dirname, "web")));
        app.use(express.json());
        app.use(express.urlencoded({ extended: false }));
        app.use(cookieParser(process.env.COOKIE_SECRET));
        app.use(
        session({
            resave: false,
            saveUninitialized: false,
            secret: process.env.COOKIE_SECRET,
            cookie: {
            httpOnly: true,
            secure: false,
            },
            name: "session",
        })
        );

        app.use("/api", routes);

        app.listen(8080, () => {
            console.log("http://localhost:8080");
        });
    }

MySQL
    1. MySQL 설치.
    - root의 비밀번호는 반드시 기억할 것.
    - 설치 시 오류가 발생하여 부득이하게 취소할 경우 작업표시줄 - 검색 - 프로그램 추가/제거 - MySQL 제거 후 다시 설치를 시도할 것

    2. 터미널
    - npm i mysql2 sequelize
    - npm i sequelize-cli
    - npx sequelize init

    완료되면 다음과 같이 폴더가 구성되어 있다.

    설치 대상 폴더
        > config
        > migrations
        > models
        > node_modules
        > seeders
        {} package-lock.json
        {} package.json

    이 중 migrations 폴더와 seeders 폴더는 제거해도 무방하다.

    package.json의 script에 "start:"nodemon app"을 추가한다.

    config의 config.js의 development, test, production에 있는 root, password, database를 MySQL의 root 계정명, root 비밀번호, 연결할 DB의 이름으로 변경한다.

    models의 index.js는 기본적으로 다음과 같다.
    {
        'use strict';

        const fs = require('fs');
        const path = require('path');
        const Sequelize = require('sequelize');
        const process = require('process');
        const basename = path.basename(__filename);
        const env = process.env.NODE_ENV || 'development';
        const config = require(__dirname + '/../config/config.json')[env];
        const db = {};

        let sequelize;
        if (config.use_env_variable) {
        sequelize = new Sequelize(process.env[config.use_env_variable], config);
        } else {
        sequelize = new Sequelize(config.database, config.username, config.password, config);
        }

        fs
        .readdirSync(__dirname)
        .filter(file => {
            return (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js');
        })
        .forEach(file => {
            const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);
            db[model.name] = model;
        });

        Object.keys(db).forEach(modelName => {
        if (db[modelName].associate) {
            db[modelName].associate(db);
        }
        });

        db.sequelize = sequelize;
        db.Sequelize = Sequelize;

        module.exports = db;
    }

    아래의 코드로 변경한다.
    {
        "use strict";

        const Sequelize = require("sequelize");
        const env = process.env.NODE_ENV || "development";
        const config = require(__dirname + "/../config/config.json")[env];

        const Table = require("./table.js");
        const db = { Table };

        let sequelize = new Sequelize(
        config.database,
        config.username,
        config.password,
        config
        );

        db.sequelize = sequelize;
        db.Sequelize = Sequelize;

        Table.init(sequelize);

        Table.associate(sequelize);

        module.exports = db;
    }

    models에 js 파일을 생성하고 다음의 코드를 입력한다.
    {
        const Sequelize = require("sequelize");

        module.exports = class Table extends Sequelize.Model {
        static init(sequelize) {
            return super.init(
            {
                column: {
                type: Sequelize.STRING(10),
                // primaryKey: true, // 고유 식별 키이냐?
                // autoIncrement: true, // index 값 자동 증가
                // unique: true, // 값이 중복되면 안된다.
                // allowNull: false, // 비면 안된다.
                },
            },
            {
                sequelize, // 넣어라
                timestamps: true, // createAt, updateAt 자동으로 추가
                underscored: true, // 테이블과 컬럼명을 카멜 케이스로 수정
                modelName: "NewTable1", // Javascript에서 사용하는 테이블명
                tableName: "new_table1", // MySQL에 있는 테이블명
                paranoid: false, // 삭제 시 deletedAt을 저장할지, 테이블에서 데이터를 삭제 시 아예 삭제를 할것인가? 아니면 삭제한 날짜를 남김으로써 데이터를 남길 것인가?
                charset: "utf8mb4", // 언어 포멧 설정
                collate: "utf8mb4_general_ci", // 언어 포멧 설정
            }
            );
        }

        static associate(db) {}
        };
    }

    설치 대상 폴더에 index.js를 생성하고 다음의 코드를 입력한다.
    {
        const dotenv = require("dotenv");

        const db = require("./models/index.js");

        dotenv.config();

        db.sequelize.sync({ force: false }).then(() => {
            console.log("db connected");
        }).catch((err) => {
            console.error(err);
        });
    }

React
    1. 터미널 입력
    - npm i -g create-react-app << 어느 디렉토리에서 설치하든 상관이 없다.
    - D << 개발 시에만 사용하는 디펜던시
    - g << global : 전역에서 사용하는 라이브러리 

    - npm list -g << 전역에 설치된 라이브러리를 확인한다.

    2. React로 만들 폴더를 만든 뒤 해당 폴더에 cd로 접근한다.
    
    3. 터미널 입력
    - npx create-react-app testing
        << testing이라는 폴더를 만들고 그 안에 react를 기본 세팅한다. 상당히 시간이 걸린다.

    - npm i -g yarn << yarn을 설치하자.
    - yarn create react-app testing << react 기본 설치
        << testing이라는 폴더를 만들고 그 안에 react를 기본 세팅한다. 상당히 시간이 걸린다.
        npm보다는 yarn이 더 안정적이다. npm은 설치순서를 지키지 않는 등 약간의 문제가 있다.
    - yarn create react-app ./ << 현재 폴더에 react 기본 설치
    - npm uninstall -g corepack << 전역으로 설치된 corepack을 삭제한다.    

    npm i styled-components === yarn add styled-components << yarn은 npm과 설치 명령어가 다르다.
    npm remove styled-components === yarn remove styled-components
    npm install === yarn install

    4. 터미널 입력
    - npm start === yarn start << 자동으로 localhost:3000으로 웹을 연다.

    
